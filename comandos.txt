-> git status = verifica o status do repositório

-> git init = cria um repositório a partir da pasta raíz. "transforma"

-> git config user.name "" = Atribui um nome de usuario ao repositório no arquivo config da pasta .git
--> obs> ao inserir a tag --global no comando acima, o git vai fazer isso pra todos os repositorios criados

-> git config user.email "" = Atribui um email do usuario ao repositório no arquivo config da pasta .git
--> obs> ao inserir a tag --global no comando acima, o git vai fazer isso pra todos os repositorios criados

-> git add "arquivo" = adiciona o arquivo no git. Indica que o mesmo deve ser monitorado dentro do projeto
                       também serve para atualizar o arquivo no git ANTES do commit e após um ADD.

-> git add . = adiciona todos os arquivos no git.

-> git commit -m "Mensagem" = realiza o commit dos arquivos que estavam "prontos"
--> obs> se colocar --amend antes do -m, vai refazer o último commit commitando o que está pronto atualmente

-> git log = exibe o log do git do repositório
--> obs> se colocar "log -n", mostra os n ultimos commits
--> obs2> se colocar --oneline retorna os commits com apenas 1 linha (inicio do hash e mensagem)
--> obs3> pesquisar no log por data "antes de": --before="2021-03-06"
--> obs4> pesquisar no log por data "depois de": --after="2021-03-06"
--> obs5> pesquisar no log por data no passado por quantidade de dias: --since="2 days ago"
--> obs6> pesquisar no log por autor: --author="nome"

-> git config core.pager cat / less = fazer o log ser mostrado inteiro no terminal mesmo se não tiver espaço

-> git checkout <hash-id> = muda o projeto para como estava naquele commit
--> obs> git checkout master volta para o commit head master

-> git diff: verifica diferenças dos arquivos atuais com os antigos

-> git reset HEAD^ --hard: descartar o último commit, voltando projeto a como era antes dele